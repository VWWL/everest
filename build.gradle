plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.springDependencyManagement)
}

allprojects {
    if (subprojects.size() > 0 && name != rootProject.name) return
    if (name == "documents" || projectDir.parentFile.name == "frontends") return

    group = 'java-ci-scaffold'
    version '1.0.0'

    apply from: "$rootDir/gradle/config/scripts/java.gradle"
    apply from: "$rootDir/gradle/config/scripts/junit.gradle"
    apply from: "$rootDir/gradle/config/scripts/style.gradle"
    apply from: "$rootDir/gradle/config/scripts/coverage.gradle"
    apply from: "$rootDir/style.gradle"

    dependencies {
        compileOnly libs.lombok
        implementation libs.guava
        implementation libs.commonsLang3
        annotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
    }

    test.dependsOn(checkstyleMain)
}

subprojects {
    apply plugin: 'java-library'
    tasks.named('test') { test ->
        if (!rootProject.hasProperty('chainTests')) return
        rootProject.tasks.named('test') {
            it.dependsOn(test)
        }
    }
}

dependencies {
    implementation project(":domain.core")
    implementation project(":application.core")
    implementation project(":users.gateways")
    implementation libs.springBootActuator
    implementation libs.springBootWeb
    implementation libs.springBootAop
    implementation libs.springBootQuartz
    implementation libs.flyaway
    implementation libs.mariadb
    implementation libs.springdoc
    implementation libs.springBootJDBC
    annotationProcessor libs.springBootConfigurationProcessor
    testImplementation libs.springBootTest
    testImplementation libs.testcontainersJunitJupiter
    testImplementation libs.testcontainersMariadb
    testImplementation libs.moco
}
if (!project.hasProperty('jacocoDisabled')) {
    apply from: "$rootDir/gradle/config/scripts/coverage-all.gradle"
    apply from: "./coverage.gradle"
}
jar {
    enabled = false
}
