import org.asciidoctor.gradle.jvm.AsciidoctorJPlugin

buildscript {
    ext.kotlin_version = '1.6.21'
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10")
        classpath("org.jetbrains.kotlinx:kover:0.5.0")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlin_version")
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}

plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.springDependencyManagement)
    alias(libs.plugins.kover)
    alias(libs.plugins.kotlin)
}

apply plugin: 'java-library'
apply plugin: "kotlin"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: "kotlin-noarg"
apply plugin: AsciidoctorJPlugin

allprojects {
    if (subprojects.size() > 0 && name != rootProject.name) return
    if (name == "documents" || projectDir.parentFile.name == "frontends") return

    group = "$project_name"
    version "$project_version"

    apply from: "$rootDir/gradle/config/scripts/java.gradle"
    apply from: "$rootDir/gradle/config/scripts/junit.gradle"
    apply from: "$rootDir/gradle/config/scripts/style.gradle"
    apply from: "$rootDir/gradle/config/scripts/coverage.gradle"
    apply from: "$rootDir/style.gradle"
    apply plugin: "kotlin"
    apply plugin: "kotlin-allopen"
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"
    apply plugin: "kotlin-noarg"

    dependencies {
        implementation libs.kotlinStdlib
        testImplementation libs.kotlinTest
        implementation libs.kotlinReflect
        compileOnly libs.lombok
        implementation libs.guava
        implementation libs.commonsLang3
        annotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
    }

    test.dependsOn(checkstyleMain)

    sourceSets {
        main.kotlin.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += 'src/main/java'
    }
}

subprojects {
    apply plugin: 'java-library'
    tasks.named('test') { test ->
        if (!rootProject.hasProperty('chainTests')) return
        rootProject.tasks.named('test') {
            it.dependsOn(test)
        }
    }
}

dependencies {
    implementation project(":domain.core")
    implementation project(":payload.core")
    implementation project(":bean.core")
    implementation project(":application.core")
    implementation project(":users.gateways")
    testImplementation project(":test.web")
    testImplementation project(":core.test")
    implementation libs.springBootActuator
    implementation libs.kotlinStdlib
    testImplementation libs.kotlinTest
    implementation libs.kotlinReflect
    implementation libs.springBootWeb
    implementation libs.springBootAop
    implementation libs.flyaway
    implementation libs.springdoc
    implementation libs.h2
    annotationProcessor libs.springBootConfigurationProcessor
    testImplementation libs.springBootTest
    testImplementation libs.testcontainersJunitJupiter
    testImplementation libs.test.spring.restdocs.restassured
    testImplementation libs.moco
}
if (!project.hasProperty('jacocoDisabled')) {
    apply from: "$rootDir/gradle/config/scripts/coverage-all.gradle"
    apply from: "./coverage.gradle"
}
jar {
    enabled = false
}

jacoco {
    toolVersion = "0.8.8"
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
    dependsOn test
}
